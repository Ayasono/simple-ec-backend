// Code generated by sqlc. DO NOT EDIT.
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
insert into products (name, description, image_url, category_id, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6)
returning id, name, description, category_id, image_url, created_at, updated_at
`

type CreateProductParams struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	ImageUrl    string       `json:"image_url"`
	CategoryID  int32        `json:"category_id"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.CategoryID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
delete
from products
where id = $1
returning id, name, description, category_id, image_url, created_at, updated_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductCategories = `-- name: GetProductCategories :many
select id, name
from categories
order by id
`

func (q *Queries) GetProductCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
select p.id,
       p.name,
       p.description,
       p.image_url,
       p.category_id,
       c.name as category_name,
       COALESCE(s.single_price, 0)::float4 as single_price,
       COALESCE(s.subs_price, 0)::float4 as subs_price
from products p
         join public.categories c on p.category_id = c.id
         join public.skus s on p.id = s.product_id
order by p.id
limit $1 offset $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListProductsRow struct {
	ID           int32   `json:"id"`
	Name         string  `json:"name"`
	Description  string  `json:"description"`
	ImageUrl     string  `json:"image_url"`
	CategoryID   int32   `json:"category_id"`
	CategoryName string  `json:"category_name"`
	SinglePrice  float32 `json:"single_price"`
	SubsPrice    float32 `json:"subs_price"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.CategoryID,
			&i.CategoryName,
			&i.SinglePrice,
			&i.SubsPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
update
    products
set name        = $1,
    description = $2,
    image_url   = $3,
    category_id = $4,
    updated_at  = $5
where id = $6
returning id, name, description, category_id, image_url, created_at, updated_at
`

type UpdateProductParams struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	ImageUrl    string       `json:"image_url"`
	CategoryID  int32        `json:"category_id"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	ID          int32        `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.CategoryID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
